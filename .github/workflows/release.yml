name: Release

on:
  push:

jobs:
  build:
    name: Build ${{ matrix.target }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: wuotan
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: wuotan.exe
          - os: macOS-latest
            target: x86_64-apple-darwin
            bin: wuotan

    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          targets: ${{ matrix.target }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        run: cargo build --release --locked --features libusb-vendored --target ${{ matrix.target }}

      - name: Strip release binary
        run: strip "target/${{ matrix.target }}/release/${{ matrix.bin }}"

      - name: Prepare artifacts
        id: artifacts
        shell: bash
        run: |
          version=${GITHUB_REF#refs/tags/}
          staging="wuotan-$version-${{ matrix.target }}"
          mkdir -p "$staging"

          cp {README.md,LICENSE} "$staging/"
          cp "target/${{ matrix.target }}/release/${{ matrix.bin }}" "$staging/"

          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a "$staging.zip" "$staging"

            echo "::set-output name=ARTIFACT::$staging.zip"
          else
            tar czf "$staging.tar.gz"  "$staging"

            echo "::set-output name=ARTIFACT::$staging.tar.gz"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.artifacts.output.ARTIFACT }}
          path: ${{ steps.artifacts.output.ARTIFACT }}
